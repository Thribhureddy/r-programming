import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

# Assuming you have a DataFrame named 'df' with columns 'Ozone' and 'Solar.R'
# Replace 'df' with your actual DataFrame name

# (i) Find and handle missing values
missing_values = df.isna().sum()
print("Missing Values:")
print(missing_values)

# Drop missing values if less than 10%, else replace with the mean
threshold = 0.1 * len(df)
df_cleaned = df.dropna(thresh=threshold, axis=1).fillna(df.mean())

# Display cleaned DataFrame
print("\nCleaned DataFrame:")
print(df_cleaned)

# (ii) Apply linear regression using Least Squares Method on “Ozone” and “Solar.R”
X = df_cleaned[['Solar.R']]
y = df_cleaned['Ozone']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a linear regression model
model = LinearRegression()

# Train the model
model.fit(X_train, y_train)

# (iii) Plot Scatter plot between Ozone and Solar and add the regression line
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Solar.R', y='Ozone', data=df_cleaned, color='blue')
plt.title('Scatter Plot between Ozone and Solar.R with Regression Line')
plt.xlabel('Solar.R')
plt.ylabel('Ozone')

# Add regression line
x_range = np.linspace(X.min(), X.max(), 100).reshape(-1, 1)
y_pred = model.predict(x_range)
plt.plot(x_range, y_pred, color='red', linewidth=2)

plt.show()

# Display coefficients and metrics
print("\nLinear Regression Coefficients:")
print(f"Intercept: {model.intercept_}")
print(f"Slope (Coefficient for Solar.R): {model.coef_[0]}")

# Evaluate the model
y_pred_test = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred_test)
r2 = r2_score(y_test, y_pred_test)
print("\nModel Evaluation:")
print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")
